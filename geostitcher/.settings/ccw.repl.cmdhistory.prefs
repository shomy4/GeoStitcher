cmdhistory=["(use 'geostitcher.repl)" "(start-server)" "(use 'geostitcher.models.schema)" "(create-users-table)" "(use 'geostitcher.models.schema)" "(create-users-table)" "(use 'geostitcher.repl)" "(start-server)" "(use 'geostitcher.repl)" "(start-server)" "(use 'geostitcher.repl)" "(start-server)" "(use 'geostitcher.repl)" "(start-server)" "(use 'geostitcher.repl)" "(start-server)" "(use 'geostitcher.repl)" "(start-server)" "(use 'geostitcher.repl)" "(start-server)" "(use 'geostitcher.repl)" "(start-server)" "(use 'geostitcher.repl)" "(start-server)" "(use 'geostitcher.repl)" "(start-server)" "(use 'geostitcher.repl)" "(start-server)" "(use 'geostitcher.repl)" "(ns geostitcher.models.db\\n  (\:require [clojure.java.jdbc \:as sql]))\\n\\n(def db {\:subprotocol \\"postgresql\\"\\n         \:subname \\"//localhost/geostitcher\\"\\n         \:user \\"postgres\\"\\n         \:password \\"postgres\\"})\\n\\n(defn create-user [user]\\n    (sql/insert\! db \:users user))\\n\\n(defn get-user [username]\\n  (first\\n  (sql/query db\\n    [\\"select * from users where username \= ?\\" username] )))" "(get-user \\"milos\\")" "(use 'geostitcher.repl)" "(start-server)" "(use 'geostitcher.repl)" "(start-server)" "(use 'geostitcher.repl)" "(start-server)" "(use 'geostitcher.repl)" "(start-server)" "(use 'geostitcher.repl)" "(start-server)" "(use 'geostitcher.repl)" "(use 'geostitcher.models.schema)" "(create-users-table)" "(use 'geostitcher.models.db)" "(db)" "(def db {\:subprotocol \\"postgresql\\"\\n         \:subname \\"//localhost/geostitcher\\"\\n         \:user \\"postgres\\"\\n         \:password \\"postgres\\"})" "(defn create-users-table []\\n  (sql/db-do-commands db\\n     (sql/create-table-ddl \:users\\n                            [\:username    \\"VARCHAR(50) PRIMARY KEY\\"\\n                             \:password    \\"VARCHAR(100)\\"\\n                             \:first_name  \\"VARCHAR(50)\\"\\n                             \:last_name   \\"VARCHAR(50)\\"\\n                             \:occupation  \\"VARCHAR(50)\\"\\n                             \:place       \\"VARCHAR(50)\\"\\n                             \:country     \\"VARCHAR(50)\\"])))" "(create-users-table)" "(ns)" "(create-users-table)" "'(db)" "(db)" "db" "create-users-table" "(defn create-users-table []\\n  (sql/db-do-commands db\\n     (sql/create-table-ddl \:users\\n                            [\:username    \\"VARCHAR(50) PRIMARY KEY\\"\\n                             \:password    \\"VARCHAR(100)\\"\\n                             \:first_name  \\"VARCHAR(50)\\"\\n                             \:last_name   \\"VARCHAR(50)\\"\\n                             \:occupation  \\"VARCHAR(50)\\"\\n                             \:place       \\"VARCHAR(50)\\"\\n                             \:country     \\"VARCHAR(50)\\"])))" "(create-users-table)" "db" "(use 'geostitcher.models.schema)" "db" "(use 'geostitcher.models.db)" "db" "(use 'geostitcher.models.db)" "db" "(use 'geostitcher.models.schema)" "(create-users-table )" "(start-server)" "(use 'geostitcher.repl)" "(start-server)" "(create-users-table )" "(create-users-table1 )" "(create-users-table )" "(defn create-users-table []\\n  (sql/db-do-commands db\\n     (sql/create-table-ddl \:users\\n                            {\:username    \\"VARCHAR(50) PRIMARY KEY\\"\\n                             \:password    \\"VARCHAR(100)\\"\\n                             \:first_name  \\"VARCHAR(50)\\"\\n                             \:last_name   \\"VARCHAR(50)\\"\\n                             \:occupation  \\"VARCHAR(50)\\"\\n                             \:place       \\"VARCHAR(50)\\"\\n                             \:country     \\"VARCHAR(50)\\"})))" "(use 'geostitcher.models.schema)" "(create-users-table )" "(use 'geostitcher.repl)" "(start-server)" "(use 'geostitcher.repl)" "(start-server)" "(use 'geostitcher.repl)" "(start-server)" "(ImageIO/write)" "(use 'geostitcher.routes.upload)" "(ImageIO/write)" "\\n  (ns geostitcher.routes.upload\\n  (\:require [compojure.core \:refer [defroutes GET POST]]\\n            [hiccup.form \:refer \:all]\\n            [hiccup.element \:refer [image]]\\n            [hiccup.util \:refer [url-encode]]\\n            [geostitcher.views.layout \:as layout]\\n            [noir.io \:refer [upload-file resource-path]]\\n            [noir.session \:as session]\\n            [noir.response \:as resp]\\n            [noir.util.route \:refer [restricted]]\\n            [clojure.java.io \:as io]\\n            [ring.util.response \:refer [file-response]]\\n            [geostitcher.models.db \:as db]\\n            ;;[geostitcher.util \:refer [galleries gallery-path]]\\n            )\\n  (\:import [java.io File FileInputStream FileOutputStream]\\n           [java.awt.image AffineTransformOp BufferedImage]\\n           java.awt.RenderingHints\\n           java.awt.geom.AffineTransform\\n           javax.imageio.ImageIO))" "(ImageIO/write)" "(ImageIO/read (io/input-stream \\"IMG_0445.jpg\\"))" "(ImageIO/read (io/input-stream \\"IMG_0446.jpg\\"))" "(use 'geostitcher.routes.upload)" "(use routes.upload)" "(use 'geostitcher.routes.upload)" "(ns)" "(str *ns*)" "(ImageIO/write (scale (ImageIO/read (io/input-stream \\"IMG_0446.jpg\\")) 0.5 150 150)\\n               \\"jpeg\\" (File . \\"scaled.jpg\\"))" "(ImageIO/write (scale (ImageIO/read (io/input-stream \\"IMG_0446.jpg\\")) 0.5 150 150)\\n               \\"jpeg\\" (File. \\"scaled.jpg\\"))" "(ImageIO/write (scale-image (io/input-stream \\"IMG_0446.jpg\\"))\\n               \\"jpeg\\" (File. \\"scaled.jpg\\"))" "(start-server)" "(**ns**)" "(*ns*)" "(**ns**)" "(str *ns*)" "(start-server)" "(str *ns*)" "(start-server)" "(clojure-version)" "(start-server)" "(use 'geostitcher.models)" "(use 'geostitcher.models.schema)" "(create-images-table)" "(start-server)" "(use 'geostitcher.models.db)" "(defn add-image [userid name]\\n  (if (first (sql/query db\\n                        [\\"SELECT userid from images where userid \= ? and name \= ?\\" userid name]))\\n    (sql/insert\! db \:images {\:userid userid \:name name}))\\n  (throw (Exception. \\"You have already uploaded an image with the exact same name\\")))" "(add-image \\"milos\\" \\"img/jpg\\")" "(first (sql/query db\\n                        [\\"SELECT userid from images where userid \= ? and name \= ?\\" \\"milos\\" \\"test.jpg\\"]))" "(ns geostitcher.models.db\\n  (\:require [clojure.java.jdbc \:as sql]))" "(first (sql/query db\\n                        [\\"SELECT userid from images where userid \= ? and name \= ?\\" \\"milos\\" \\"test.jpg\\"]))" "(if nil \\"yes\\")" "(if nil \\"yes\\" \\"no\\")" "(defn add-image [userid name]\\n  (if (first (sql/query db\\n                        [\\"SELECT userid from images where userid \= ? and name \= ?\\" userid name]))\\n    (sql/insert\! db \:images {\:userid userid \:name name})\\n  (throw (Exception. \\"You have already uploaded an image with the exact same name\\"))))" "(first (sql/query db\\n                        [\\"SELECT userid from images where userid \= ? and name \= ?\\" \\"milos\\" \\"test.jpg\\"]))" "(defn add-image [userid name]\\n  (if-not (first (sql/query db\\n                            [\\"SELECT userid from images where userid \= ? and name \= ?\\" userid name]))\\n    (sql/insert\! db \:images {\:userid userid \:name name})\\n  (throw (Exception. \\"You have already uploaded an image with the exact same name\\"))))" "(first (sql/query db\\n                        [\\"SELECT userid from images where userid \= ? and name \= ?\\" \\"milos\\" \\"test.jpg\\"]))" "(add-image \\"milos\\" \\"test.jpg\\")" "(use 'geostitcher.models.db)" "(add-image \\"milos\\" \\"test.jpg\\")" "(add-image \\"milos\\" \\"test1.jpg\\")" "(use 'geostitcher.repl)" "(start-server)" "(use 'geostitcher.util)" "(gallery-path)" "(galleries)" "(start-server)" "(ns geostitcher.models.db\\n  (\:require [clojure.java.jdbc \:as sql]))" "(defn images-by-user [userid]\\n  (sql/query db\\n    [\\"select * from images where userid \= ?\\" userid] ))" "(images-by-user \\"milos\\")" "(first (images-by-user \\"milos\\"))" "(use 'geostitcher.models.db)" "(defn get-gallery-previews []\\n  (sql/query db\\n             [\\"SELECT * FROM (SELECT *,row_number() OVER (partition by userid) as row_number from images) as rows where row_number \= 1\\"])\\n  )" "(ns geostitcher.models.db\\n  (\:require [clojure.java.jdbc \:as sql]))" "(def db {\:subprotocol \\"postgresql\\"\\n         \:subname \\"//localhost/geostitcher\\"\\n         \:user \\"postgres\\"\\n         \:password \\"\\"})" "(defn get-gallery-previews []\\n  (sql/query db\\n             [\\"SELECT * FROM (SELECT *,row_number() OVER (partition by userid) as row_number from images) as rows where row_number \= 1\\"])\\n  )" "(get-gallery-previews)" "(start-server)" "(use 'geostitcher.routes.gallery)" "(show-galleries)" "(display-gallery milos)" "(display-gallery \\"milos\\")" "(defn display-gallery [userid]\\n  (or\\n    (not-empty (map thumbnail-link (db/images-by-user userid)))\\n    [\:p \\"The user \\" userid \\" does not have any galleries\\"]))" "(use 'geostitcher.routes.gallery)" "(display-gallery \\"milos\\")" "(map thumbnail-link (db/images-by-user \\"milos\\"))" "(use 'geostitcher.routes.gallery)" "(display-gallery \\"milos\\")" "(use 'geostitcher.repl)" "(start-server)" "(delete-image \\"milos\\" \\"test.jpg\\")" "(delete-image \\"milos\\" \\"IMG_0612.jpg\\")" "(get-gallery-previews)" "(use 'geostitcher.models.db)" "(delete-image \\"milos\\" \\"test.jpg\\")" "(use 'geostitcher.models.db)" "(delete-image \\"milos\\" \\"test.jpg\\")" "(delete-image \\"milos\\" \\"IMG_0612.jpg\\")" "(delete-image \\"milos\\" \\"test.jpg\\")" "(delete-image \\"milos\\" \\"IMG_0612.jpg\\")" "(start-server)"]
eclipse.preferences.version=1
